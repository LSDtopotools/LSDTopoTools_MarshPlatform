= LSDTopoTools_MarshExtraction
This repository contains several Python scripts you can use to detect saltmarsh platforms and outlines on a DEM.
In this README you will find:

1. Instructions to use this programme successfully.

2. A description of the input data files provided.

3. Some comments.

== Setting up your python environment


We have tried many different methods and have found https://conda.io/miniconda.html[miniconda] is the most reproducible. Just download https://conda.io/miniconda.html[miniconda], install, and follow the instructions below. Note that we think these will work on both python 2 and 3 but the authors of these documents (GCHG and SMM) are a bit retro and is still using python 2.7. So if you want to be sure everything will work download the 2.7 version.

=== Setting up python using a conda virtual environment

. Download and install http://conda.pydata.org/miniconda.html[miniconda] on your host machine.
. Open a command prompt (use the start menu to search for *cmd.exe*) or terminal in MacOS/Linux. In windows you should open an administrator version (right click on where it says csd.exe in the start menu and you will see this option).
. Get our environment file. We have a different file depending whether you are running on https://github.com/LSDtopotools/LSDTopoTools_MarshPlatform/blob/master/environment.yml[Windows] or on https://github.com/LSDtopotools/LSDTopoTools_MarshPlatform/blob/master/environment+linux_64.yml[Linux]. Both of these files are included with the repository, so you shouldn't need to download them separately.
. Create the environment using the environment files.  If you are using Windows then you can use the command:
+
[source,console]
----
> conda env create -f environment.yml
----
+
If you're using Linux, then you should use our Linux environment file (this is for 64 bit operating systems):
+
[source,console]
----
> conda env create -f environment_linux64.yml
----
+
I'm afraid this will take a little while. Actually it will take a very long time. Sorry.
+
If you have trouble creating the environment using either of these files (there may be some package dependency issues on your specific operating system), then you can also set up a new conda environment yourself on macOS or Linux with the following commands:
+
[source,console]
----
> conda create --name LSDTT
> source activate LSDTT
> conda install scipy
> conda install matplotlib
> conda install pandas
> conda install gdal
> conda install spyder
> conda install basemap
> conda install fiona
> conda install rasterio
----
+
IMPORTANT: You only need to create your own environment if you couldn't get the `environment.yml` file to work properly!

. Activate the environment. On Windows:
+
[source,console]
----
> activate LSDTT
----
+
macOS or Linux:
+
[source,console]
----
> source activate LSDTT
----
+
NOTE: This environment does not include *spyder*, you can install it with `conda install -n LSDTT spyder`


== Data preparation

To run the platform extraction algorithm, we must first have a DEM, and we must also have two additional rasters:

* A slope raster
* A hillshade raster (for plotting)

We can optionally have:

* A curvature raster (for plotting)
* A filtered raster (for noisy data)

In the publication associated with this software, we use *LSDTopoTools* to extract these rasters; *LSDTopoTools* uses a polynomial fitting routine to calculate slopes which we find is more reliable then methods in standard GIS software (http://onlinelibrary.wiley.com/doi/10.1029/2011JF002057/full[Hurst et al., 2012]).

To extract these rasters, we have used the program *LSDTopoTools Basic Metrics*: the repository is here: https://github.com/LSDtopotools/LSDTopoTools_AnalysisDriver

. Clone the repository:
+
[source, console]
----
$ git clone https://github.com/LSDtopotools/LSDTopoTools_AnalysisDriver.git
----
+
. Go into the `Analysis_driver` directory and `make` the `LSDTT_BasicMetrics` program:
+
[source, console]
----
$ cd LSDTopoTools_AnalysisDriver
$ cd Analysis_driver
$ make -f LSDTT_BasicMetrics.make
----
+
. This will result in a program called `LSDTT_BasicMetrics.exe`. You run this from the terminal with two arguments:
.. The directory with the parameter file
.. The name of the parameter file
. We have included an example parameter file with the data. It looks like this:
+
[source,paramfile]
----
# Parameters for extracting simple surface metrics
# Comments are preceeded by the hash symbol
# Documentation can be found here:
# https://simon-m-mudd.github.io/QGIS_book/#_an_example_using_data_from_lsdtopotools

# These are parameters for the file i/o
# IMPORTANT: You MUST make the write directory: the code will not work if it doesn't exist.
read path: /LSDTopoTools/Git_projects/LSDTopoTools_MarshPlatform/Example_data
write path: /LSDTopoTools/Git_projects/LSDTopoTools_MarshPlatform/Example_data
read fname: FEL_DEM_clip
write fname: FEL_DEM_clip
channel heads fname: NULL

# You need the hillshade for plotting
write_hillshade: true

# You need the slope raster as well
surface_fitting_radius: 1
print_slope: true

# You can uncomment these two lines if you want either the curvature or the wiener filtered topography
print_curvature: true
print_wiener_filtered_raster: true
----
+
. *IMPORTANT* You need to change the directory names in the parameter file to reflect your directories, so change these lines:
+
[source,paramfile]
----
read path: /my/path/to/LSDTopoTools_MarshPlatform/Example_data
write path: /my/path/to/LSDTopoTools_MarshPlatform/Example_data
----
+
. Now run the program, making sure you use your own directory structure where the parameter file is located:
+
[source,console]
----
$ ./LSDTT_BasicMetrics.exe /my/path/to/LSDTopoTools_MarshPlatform/Example_data FEL_LSDTT.driver
----


== The marsh analysis package

Our marsh analysis package is located withing the folder `LSDMarshPlatform`. If you have this folder in your working directory you can import it using `import LSDMarshPlatform as MP` in your python scripts.

Inside this folder there are python files that contain the analysis functions (`LSDMarshPlatform_functions.py`) and wrappers for the analysis and plotting (`LSDMarshPlatform_Marsh_ID.py` and `LSDMarshPlatform_Plots.py`).

We drive the analysis using the python script `MarshPlatformAnalysis.py`.

=== Use of `MarshPlatformAnalysis.py`

. `MarshPlatformAnalysis.py` runs from command line. You execute it with flags. To get help run, in a terminal or command prompt:
+
[source,console]
----
$ python MarshPlatformAnalysis.py -h
----
+
. The basic usage of this script is to call both the analysis and the plotting functions. You need to designate site prefixes as well. For the example a call would look like:
+
[source,console]
----
$ python MarshPlatformAnalysis.py -dir /LSDTopoTools/Git_projects/LSDTopoTools_MarshPlatform/Example_data/ -sites FEL_DEM_clip -MID True -MIDP True
----
+
in Linux or
[source,console]
----
> python MarshPlatformAnalysis.py -dir C:\\LSDTopoTools\\Git_projects\\LSDTopoTools_MarshPlatform\\Example_data\\ -sites FEL_DEM_clip -MID True -MIDP True
----
+
in Windows. *You will need to adjust the path to reflect your directory structre!*

=== Options

The options are:

* `-dir`: The directoy that contains the data
* `-sites`: comma seperated strings with the prefix of the site data (so if hte DEM is `FEL_DEM_clip.bil`, then sites will have `FEL_DEM_clip`)
* `-MID`: Set to True if you want to run the marsh identification algorithms. This prints a number of rasters.
* `-MIDP`: Set to True if you want to print figures of the data.



=== Use and Abuse
Preferably use this script on saltmarshes with distinct scarp features separating them from the tidal flat.
Sparsely vegetated pioneer zones that have no impact on topography will lead to a strong decrease in accuracy.
