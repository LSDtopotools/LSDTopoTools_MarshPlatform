= LSDTopoTools_MarshExtraction
This repository contains several Python scripts you can use to detect saltmarsh platforms and outlines on a DEM.
In this README you will find:

1. Instructions to use this programme successfully.

2. A description of the input data files provided.

3. Some comments.

== Setting up your python environment


We have tried many different methods and have found https://conda.io/miniconda.html[miniconda] is the most reproducible. Just download https://conda.io/miniconda.html[miniconda], install, and follow the instructions below. Note that we think these will work on both python 2 and 3 but the authors of these documents (GCHG and SMM) are a bit retro and is still using python 2.7. So if you want to be sure everything will work download the 2.7 version. 

=== Setting up python using a conda virtual environment

. Download and install http://conda.pydata.org/miniconda.html[miniconda] on your host machine. 
. Open a command prompt (use the start menu to search for *cmd.exe*) or terminal in MacOS/Linux. In windows you should open an administrator version (right click on where it says csd.exe in the start menu and you will see this option).
. Get our  https://github.com/LSDtopotools/LSDTopoTools_MarshPlatform/blob/master/environment.yml[environment file] (this is included in the repository).
. Create the environment from that file with:
+
[source,console]
----
> conda env create -f environment.yml
----
+
I'm afraid this will take a little while. Actually it will take a very long time. Sorry. 
. Activate the environment:
+
[source,console]
----
> activate LSDTT
----

NOTE: This environment does not include *spyder*, you can install it with `conda install -n LSDTT spyder`


== Data preparation

To run the platform extraction algorithm, we must first have a DEM, and we must also have two additional rasters:

* A slope raster
* A hillshade raster (for plotting)

We can optionally have:

* A curvature raster (for plotting)
* A filtered raster (for noisy data)

In the publication associated with this software, we use *LSDTopoTools* to extract these rasters; *LSDTopoTools* uses a polynomial fitting routine to calculate slopes which we find is more reliable then methods in standard GIS software (http://onlinelibrary.wiley.com/doi/10.1029/2011JF002057/full[Hurst et al., 2012]). 

To extract these rasters, we have used the program *LSDTopoTools Basic Metrics*: the repository is here: https://github.com/LSDtopotools/LSDTopoTools_AnalysisDriver

. Clone the repository:
+
[source, console]
----
$ git clone https://github.com/LSDtopotools/LSDTopoTools_AnalysisDriver.git
----
+
. Go into the `Analysis_driver` directory and `make` the `LSDTT_BasicMetrics` program:
+
[source, console]
----
$ cd LSDTopoTools_AnalysisDriver
$ cd Analysis_driver
$ make -f LSDTT_BasicMetrics.make
----
+
. This will result in a program called `LSDTT_BasicMetrics.out`. You run this from the termanal with two arguments:
.. The directory with the parameter file
.. The name of the parameter file
. We have included an example parameter file with the data. It looks like this:
+
[source,paramfile]
----
# Parameters for extracting simple surface metrics
# Comments are preceeded by the hash symbol
# Documentation can be found here: 
# https://simon-m-mudd.github.io/QGIS_book/#_an_example_using_data_from_lsdtopotools

# These are parameters for the file i/o
# IMPORTANT: You MUST make the write directory: the code will not work if it doesn't exist. 
read path: /LSDTopoTools/Git_projects/LSDTopoTools_MarshPlatform/Example_data
write path: /LSDTopoTools/Git_projects/LSDTopoTools_MarshPlatform/Example_data
read fname: FEL_DEM_clip
write fname: FEL_DEM_clip
channel heads fname: NULL

# You need the hillshade for plotting
write_hillshade: true

# You need the slope raster as well
surface_fitting_radius: 1
print_slope: true

# You can uncomment these two lines if you want either the curvature or the wiener filtered topography
print_curvature: true
print_wiener_filtered_raster: true
----
+
. *IMPORTANT* You need to change the directory names in the parameter file to reflect your directories, so change these lines:
+
[source,paramfile]
----
read path: /my/path/to/LSDTopoTools_MarshPlatform/Example_data
write path: /my/path/to/LSDTopoTools_MarshPlatform/Example_data
----
+
. Now run the program, making sure you use your own directory structure where the parameter file is located:
+
[source,console]
----
$ ./LSDTT_BasicMetrics.out /my/path/to/LSDTopoTools_MarshPlatform/Example_data FEL_LSDTT.driver
----


== User Manual for the Python scripts

Once the input data is prepared, you are ready to extract marsh platforms using our python scripts!

=== Example_Input_prep.py
This file prepares your DEM (or DEMs) for analysis.
Instructions and process breakdown are included in the script.
Please note that this script requires:

. http://www.gdal.org/[GDAL]
. a Wiener filter, also used in LSDTopoTools for channel extractions. The makefile `Wiener_filter.make` can be found at: https://github.com/LSDtopotools/LSDTopoTools_ChannelExtraction/tree/master/driver_functions_ChannelExtraction
. a basic LSD TopoTools topographic analysis package and the associated driver file. You can find the analysis package here: https://github.com/LSDtopotools/LSDTopoTools_AnalysisDriver. A template for the driver file is located in the Input/ folder under the name `FEL_slope_curv.LSDTT_driver`.

We recommend that you run this file independently from the rest of the analysis as it may need to be run from several locations, depending on your file organisation.

==== Do I really need this file?
If your DEM is already associated to a slope raster, you may run the marsh identification without using this file. However, we do not guarantee results if the slope was calculated via a method different from that used in our preprocessing file.



=== Example_Motherscript.py
This file runs the identification script "Example_Marsh_ID.py" and the plotting script "Example_Plots.py".
You can also set it to run the preparation script "Example_Input_prep.py" if you have already computed the slope, curvature and hillshade rasters. This is particularly useful if you want to change the domain of your analysis or modify your reference.


=== Example_Marsh_ID.py
This is the file which runs the identification process. In this file you need to specify the site you are working with and the parameter values. In exchange, you will get three .bil rasters: one for the initial search space used to narrow down the search for scarps, one for the scarps, and one for the marsh platforms.
Note that the scarps file does not necessarily correspond to the edges of the marsh platform. It is merely an intermediate step.

If you have a reference marsh outline, you will also get a confusion map as a .bil raster to evaluate the quality of the detection process.



=== Example_Plots.py
This file produces plots so that you may visualise your results. Please read the description of each plot in the file to know what you are looking at.


== Example_functions.py
This file contains all the useful functions used to identify marsh platforms and plot your results. Please do not touch this file unless you know what you are doing.



== Data 

Caution: Rasters as input and produced as outputs are in the ENVI .bil format, which means they are associated to a .hdr file. Do not delete the .hdr files. Also, if you rename a .bil file, make sure you also rename the associateed .hdr.

=== Input
The input data provided are sufficient to run the marsh detection script without bothering the preparation phase. We also included data with which to run the preparation phase if you really want to (except the 'SITE_trans.asc' file mentioned in 'Example_Input_prep.py', stage 1, because that file is heavy), without changing the file names.


==== Input/FEL_domain
The vector files containing the domain in which you want to find marshes. 

==== Input/FEL_DEM
The unclipped DEM for our example site. (It's actually the same as the clipped DEM to save space)

==== Input/FEL_DEM_clip
The DEM for our example site, clipped to the domain extent.

==== Input/FEL_DEM_WFILT
The unclipped DEM after using a Wiener filter (Wiener, 1949).

==== Input/FEL_slope_clip
The slope raster, calculated from an unclipped DEM then clipped to the domain extent.

==== Input/FEL_curvature_clip
The curvature raster, calculated from an unclipped DEM then clipped to the domain extent.
NB: You don't need this to detect marshes, but it looks nice.

==== Input/FEL_hs_clip 
The hillshade raster, calculated from an unclipped DEM then clipped to the domain extent.
NB: You don't need this to detect marshes, but it's really good to make figures.

==== Input/FEL_slope_curv.LSDTT_driver
The driver file used in the 'Example_Input_prep.py' file.


=== Output/ 
The files generated by the marsh detector.

==== Output/FEL_Scarps
The raster of scarps produced by routing. Remember, these are not the outline of the marsh platform.

==== Output/FEL_Platform
This is the platform raster.

==== Output/FEL_Confusion_DEM
This is the confusion map, with values : True Positive = 1; True Negative = 2; False Positive = -1; False Negative = -2.

==== Output/FEL_Metrix.pkl and _Performace.pkl
Storage files for the analysis of the confusion map, should you need it.

==== Output/Figure_X 
The figures produced by the plotting script. See that script for a description.



=== Use and Abuse
Preferably use this script on saltmarshes with distinct scarp features separating them from the tidal flat.
Sparsely vegetated pioneer zones that have no impact on topography will lead to a strong decrease in accuracy.
